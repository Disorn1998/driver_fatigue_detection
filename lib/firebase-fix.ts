"use client"

import { getDatabase, ref, get } from "firebase/database"
import type { SafetyData } from "./types"

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏≤‡∏Å Firebase ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á history ‡πÅ‡∏•‡∏∞ alerts
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
 * @param deviceId ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
 * @param startDate ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 * @param endDate ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
 * @returns ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
 */
export const getFilteredSafetyDataFixed = async (
  deviceId: string,
  startDate: string,
  endDate: string,
): Promise<SafetyData | null> => {
  try {
    const database = getDatabase()
    if (!database) {
      console.warn("üîß Firebase not available for getFilteredSafetyData")
      return null
    }

    console.log(`üîç Firebase: Getting safety data for ${deviceId} from ${startDate} to ${endDate}`)

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å alerts
    const alertsRef = ref(database, "alerts")
    const alertsSnapshot = await get(alertsRef)

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å history
    const historyRef = ref(database, `devices/${deviceId}/history`)
    const historySnapshot = await get(historyRef)

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    const startTime = new Date(startDate).getTime()
    const endTime = new Date(endDate).getTime()

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• alerts
    const events: any[] = []
    let yawnCount = 0
    let drowsinessCount = 0
    let criticalCount = 0

    if (alertsSnapshot.exists()) {
      const alertsData = alertsSnapshot.val()

      Object.entries(alertsData).forEach(([id, alert]: [string, any]) => {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ alert ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á deviceId ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        if (
          alert.device_id === deviceId &&
          alert.timestamp &&
          new Date(alert.timestamp).getTime() >= startTime &&
          new Date(alert.timestamp).getTime() <= endTime
        ) {
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á alert
          if (alert.alert_type === "yawn_detected") {
            yawnCount++
          } else if (alert.alert_type === "drowsiness_detected") {
            drowsinessCount++
          } else if (alert.alert_type === "critical_drowsiness") {
            criticalCount++
          }

          events.push({
            id,
            timestamp: alert.timestamp,
            type:
              alert.alert_type === "yawn_detected"
                ? "yawn"
                : alert.alert_type === "drowsiness_detected" || alert.alert_type === "critical_drowsiness"
                  ? "fatigue"
                  : "other",
            severity: alert.severity === "high" ? 3 : alert.severity === "medium" ? 2 : 1,
            details: alert.alert_type,
          })
        }
      })
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ EAR ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    let totalEAR = 0
    let validEARCount = 0

    if (historySnapshot.exists()) {
      const historyData = historySnapshot.val()

      Object.values(historyData).forEach((item: any) => {
        if (
          item.timestamp &&
          new Date(item.timestamp).getTime() >= startTime &&
          new Date(item.timestamp).getTime() <= endTime &&
          item.ear &&
          item.ear > 0
        ) {
          totalEAR += item.ear
          validEARCount++
        }
      })
    }

    const averageEAR = validEARCount > 0 ? totalEAR / validEARCount : 0

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    let safetyScore = 100

    // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
    safetyScore -= Math.min(yawnCount * 2, 30) // ‡∏´‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ß
    safetyScore -= Math.min(drowsinessCount * 5, 40) // ‡∏´‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 40 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏•‡πâ‡∏≤
    safetyScore -= Math.min(criticalCount * 10, 50) // ‡∏´‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 50 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡∏¥‡∏Å‡∏§‡∏ï

    // ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ EAR ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    if (averageEAR < 0.25) {
      safetyScore -= 20
    } else if (averageEAR < 0.3) {
      safetyScore -= 10
    }

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-100
    safetyScore = Math.max(0, Math.min(100, safetyScore))

    console.log(`‚úÖ Firebase: Safety data processed for ${deviceId}`, {
      eventsCount: events.length,
      yawnCount,
      drowsinessCount,
      criticalCount,
      averageEAR,
      safetyScore,
    })

    return {
      deviceId,
      events: events.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()),
      safetyScore,
      startDate,
      endDate,
      stats: {
        yawnEvents: yawnCount,
        fatigueEvents: drowsinessCount + criticalCount,
        criticalEvents: criticalCount,
        averageEAR,
      },
    }
  } catch (error) {
    console.error(`‚ùå Firebase: Error getting safety data for ${deviceId}:`, error)
    return null
  }
}
