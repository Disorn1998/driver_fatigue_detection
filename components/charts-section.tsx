"use client"

import { useMemo, useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from "recharts"
import type { DailyStats } from "@/lib/data-service"
import type { HistoricalData } from "@/lib/firebase"

interface ChartsSectionProps {
  data: HistoricalData[]
  stats?: DailyStats | null
  showAllCharts?: boolean
}

export function ChartsSection({ data, stats, showAllCharts = false }: ChartsSectionProps) {
  const [activeChart, setActiveChart] = useState("ear")

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase
  const safeData = useMemo(() => {
    console.log("üîç ChartsSection: Processing data", {
      dataLength: Array.isArray(data) ? data.length : 0,
      type: typeof data,
      isArray: Array.isArray(data),
      hasStats: !!stats,
      statsData: stats,
    })

    if (!data) {
      console.warn("‚ö†Ô∏è Data is null or undefined")
      return []
    }

    if (!Array.isArray(data)) {
      console.warn("‚ö†Ô∏è Data is not an array:", { data, type: typeof data })
      return []
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ timestamp ‡∏≠‡∏≠‡∏Å
    const filteredData = data.filter((item) => item && item.timestamp)

    console.log("‚úÖ Data is valid array with length:", filteredData.length)
    return filteredData
  }, [data])

  // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ (EAR ‡πÅ‡∏•‡∏∞ Mouth Distance)
  const technicalData = useMemo(() => {
    if (!Array.isArray(safeData) || safeData.length === 0) {
      console.warn("‚ö†Ô∏è SafeData is not valid for technicalData")
      return []
    }

    return safeData.map((item) => ({
      time: new Date(item.timestamp).toLocaleTimeString("th-TH", {
        hour: "2-digit",
        minute: "2-digit",
      }),
      ear: item.ear || 0,
      mouth: item.mouth_distance || 0,
      face_frames: item.face_detected_frames || 0,
    }))
  }, [safeData])

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
  const statusDistribution = useMemo(() => {
    if (!Array.isArray(safeData) || safeData.length === 0) {
      console.log("‚ö†Ô∏è No data for status distribution")
      return []
    }

    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stats ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
    let totalYawns = 0
    let totalDrowsiness = 0
    let totalAlerts = 0

    if (stats) {
      totalYawns = stats.totalYawns || 0
      totalDrowsiness = stats.totalDrowsiness || 0
      totalAlerts = stats.totalAlerts || 0
    } else {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
      const dailyGroups: { [date: string]: HistoricalData[] } = {}
      safeData.forEach((item) => {
        const date = new Date(item.timestamp).toDateString()
        if (!dailyGroups[date]) dailyGroups[date] = []
        dailyGroups[date].push(item)
      })

      Object.values(dailyGroups).forEach((dayData) => {
        const sortedDayData = [...dayData].sort(
          (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime(),
        )
        const latestOfDay = sortedDayData[0]

        totalYawns += latestOfDay.yawn_events || 0
        totalDrowsiness += latestOfDay.drowsiness_events || 0
        totalAlerts += latestOfDay.critical_alerts || 0
      })
    }

    const totalNormal = Math.max(0, safeData.length - (totalYawns + totalDrowsiness + totalAlerts))

    const distribution = {
      ‡∏õ‡∏Å‡∏ï‡∏¥: totalNormal,
      ‡∏´‡∏≤‡∏ß: totalYawns,
      ‡∏á‡πà‡∏ß‡∏á‡∏ô‡∏≠‡∏ô: totalDrowsiness,
      ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢: totalAlerts,
    }

    const colors = {
      ‡∏õ‡∏Å‡∏ï‡∏¥: "#22c55e",
      ‡∏´‡∏≤‡∏ß: "#f97316",
      ‡∏á‡πà‡∏ß‡∏á‡∏ô‡∏≠‡∏ô: "#f59e0b",
      ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢: "#ef4444",
    }

    return Object.entries(distribution).map(([status, count]) => ({
      name: status,
      value: count,
      color: colors[status as keyof typeof colors] || "#6B7280",
    }))
  }, [safeData, stats])

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  const hourlyActivityData = useMemo(() => {
    if (!Array.isArray(safeData) || safeData.length === 0) return []

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    const allHours = Array.from({ length: 24 }, (_, i) => {
      const hourKey = `${i.toString().padStart(2, "0")}:00`
      return {
        hour: hourKey,
        ‡∏´‡∏≤‡∏ß: 0,
        ‡∏á‡πà‡∏ß‡∏á‡∏ô‡∏≠‡∏ô: 0,
        ‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢: 0,
      }
    })

    // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    const hourlyGroups: { [hour: number]: HistoricalData[] } = {}

    safeData.forEach((item) => {
      const hour = new Date(item.timestamp).getHours()
      if (!hourlyGroups[hour]) hourlyGroups[hour] = []
      hourlyGroups[hour].push(item)
    })

    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∞‡∏™‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    Object.entries(hourlyGroups).forEach(([hourStr, records]) => {
      const hour = Number.parseInt(hourStr)
      if (hour >= 0 && hour < 24 && records.length > 0) {
        const sortedRecords = [...records].sort(
          (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime(),
        )
        const latestRecord = sortedRecords[0]

        allHours[hour].‡∏´‡∏≤‡∏ß = latestRecord.yawn_events || 0
        allHours[hour].‡∏á‡πà‡∏ß‡∏á‡∏ô‡∏≠‡∏ô = latestRecord.drowsiness_events || 0
        allHours[hour].‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ = latestRecord.critical_alerts || 0
      }
    })

    return allHours
  }, [safeData])

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  const safetyStats = useMemo(() => {
    if (stats) {
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å stats ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
      const earScore = Math.min(100, (stats.averageEAR || 0) * 300)
      const yawnPenalty = Math.min(30, (stats.totalYawns || 0) * 2)
      const drowsinessPenalty = Math.min(40, (stats.totalDrowsiness || 0) * 5)
      const criticalPenalty = Math.min(50, (stats.totalAlerts || 0) * 25)

      const finalScore = Math.max(0, Math.min(100, earScore - yawnPenalty - drowsinessPenalty - criticalPenalty))

      let status = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
      if (finalScore < 20) status = "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
      else if (finalScore < 40) status = "‡πÅ‡∏¢‡πà"
      else if (finalScore < 60) status = "‡∏û‡∏≠‡πÉ‡∏ä‡πâ"
      else if (finalScore < 80) status = "‡∏î‡∏µ"

      return {
        totalYawns: stats.totalYawns || 0,
        totalDrowsiness: stats.totalDrowsiness || 0,
        totalCritical: stats.totalAlerts || 0,
        avgEar: (stats.averageEAR || 0).toFixed(3),
        score: Math.round(finalScore),
        status,
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ stats ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
    if (!Array.isArray(safeData) || safeData.length === 0) {
      return {
        totalYawns: 0,
        totalDrowsiness: 0,
        totalCritical: 0,
        avgEar: "0.000",
        score: 0,
        status: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      }
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö
    const dailyGroups: { [date: string]: HistoricalData[] } = {}
    safeData.forEach((item) => {
      const date = new Date(item.timestamp).toDateString()
      if (!dailyGroups[date]) dailyGroups[date] = []
      dailyGroups[date].push(item)
    })

    let totalYawns = 0
    let totalDrowsiness = 0
    let totalAlerts = 0

    Object.values(dailyGroups).forEach((dayData) => {
      const sortedDayData = [...dayData].sort(
        (a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime(),
      )
      const latestOfDay = sortedDayData[0]

      totalYawns += latestOfDay.yawn_events || 0
      totalDrowsiness += latestOfDay.drowsiness_events || 0
      totalAlerts += latestOfDay.critical_alerts || 0
    })

    const validEarData = safeData.filter((item) => (item.ear || 0) > 0)
    const avgEar =
      validEarData.length > 0 ? validEarData.reduce((sum, item) => sum + (item.ear || 0), 0) / validEarData.length : 0

    const earScore = Math.min(100, avgEar * 300)
    const yawnPenalty = Math.min(30, totalYawns * 2)
    const drowsinessPenalty = Math.min(40, totalDrowsiness * 5)
    const criticalPenalty = Math.min(50, totalAlerts * 25)

    const finalScore = Math.max(0, Math.min(100, earScore - yawnPenalty - drowsinessPenalty - criticalPenalty))

    let status = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
    if (finalScore < 20) status = "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
    else if (finalScore < 40) status = "‡πÅ‡∏¢‡πà"
    else if (finalScore < 60) status = "‡∏û‡∏≠‡πÉ‡∏ä‡πâ"
    else if (finalScore < 80) status = "‡∏î‡∏µ"

    return {
      totalYawns,
      totalDrowsiness,
      totalCritical: totalAlerts,
      avgEar: avgEar.toFixed(3),
      score: Math.round(finalScore),
      status,
    }
  }, [safeData, stats])

  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  if (!Array.isArray(safeData) || safeData.length === 0) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="text-center py-8">
            <p className="text-muted-foreground text-sm sm:text-base">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
            <p className="text-xs sm:text-sm text-muted-foreground mt-2">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="space-y-4 sm:space-y-6">
      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 mb-4 sm:mb-6">
        <div className="bg-yellow-50 p-3 sm:p-4 rounded-lg border border-yellow-200">
          <div className="text-xl sm:text-2xl font-bold text-yellow-600">{safetyStats.totalYawns}</div>
          <div className="text-xs sm:text-sm text-yellow-700">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏ß</div>
        </div>
        <div className="bg-orange-50 p-3 sm:p-4 rounded-lg border border-orange-200">
          <div className="text-xl sm:text-2xl font-bold text-orange-600">{safetyStats.totalDrowsiness}</div>
          <div className="text-xs sm:text-sm text-orange-700">‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏á‡πà‡∏ß‡∏á</div>
        </div>
        <div className="bg-red-50 p-3 sm:p-4 rounded-lg border border-red-200">
          <div className="text-xl sm:text-2xl font-bold text-red-600">{safetyStats.totalCritical}</div>
          <div className="text-xs sm:text-sm text-red-700">‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πà‡∏ß‡∏ô</div>
        </div>
        <div className="bg-blue-50 p-3 sm:p-4 rounded-lg border border-blue-200">
          <div className="text-xl sm:text-2xl font-bold text-blue-600">{stats?.totalSessions || 0}</div>
          <div className="text-xs sm:text-sm text-blue-700">‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô</div>
        </div>
      </div>

      {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏Å 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå */}
      <div className="grid grid-cols-1 xl:grid-cols-2 gap-4 sm:gap-6">
        {/* Status Distribution Pie Chart */}
        <Card>
          <CardHeader className="pb-3 sm:pb-4">
            <CardTitle className="text-base sm:text-lg">‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà</CardTitle>
            <CardDescription className="text-xs sm:text-sm">
              ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏∞‡∏™‡∏°)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={250}>
              <PieChart>
                <Pie
                  data={statusDistribution}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                  outerRadius={80}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {statusDistribution.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip formatter={(value: any) => [`${value} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]} />
              </PieChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        {/* Hourly Activity Bar Chart */}
        <Card>
          <CardHeader className="pb-3 sm:pb-4">
            <CardTitle className="text-base sm:text-lg">‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)</CardTitle>
            <CardDescription className="text-xs sm:text-sm">
              ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ï‡∏•‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏∞‡∏™‡∏°)
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ResponsiveContainer width="100%" height={250}>
              <BarChart data={hourlyActivityData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="hour" tick={{ fontSize: 10 }} interval={1} angle={-45} textAnchor="end" height={50} />
                <YAxis tick={{ fontSize: 10 }} />
                <Tooltip />
                <Legend />
                <Bar dataKey="‡∏´‡∏≤‡∏ß" fill="#f97316" />
                <Bar dataKey="‡∏á‡πà‡∏ß‡∏á‡∏ô‡∏≠‡∏ô" fill="#f59e0b" />
                <Bar dataKey="‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢" fill="#ef4444" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ showAllCharts = true) */}
      {showAllCharts && (
        <Card>
          <CardHeader className="pb-3 sm:pb-4">
            <CardTitle className="text-base sm:text-lg">‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ</CardTitle>
            <CardDescription className="text-xs sm:text-sm">‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[250px]">
              <ResponsiveContainer width="100%" height="100%">
                <LineChart data={technicalData}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="time" tick={{ fontSize: 10 }} />
                  <YAxis tick={{ fontSize: 10 }} />
                  <Tooltip formatter={(value: any) => [value?.toFixed(3), "‡∏Ñ‡πà‡∏≤ EAR"]} />
                  <Legend />
                  <Line
                    type="monotone"
                    dataKey="ear"
                    name="‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î"
                    stroke="#10B981"
                    strokeWidth={2}
                    dot={{ fill: "#10B981", strokeWidth: 2, r: 3 }}
                  />
                  <Line
                    type="monotone"
                    dataKey={() => 0.25}
                    name="‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏ß‡∏á"
                    stroke="#EF4444"
                    strokeWidth={2}
                    strokeDasharray="5 5"
                    dot={false}
                  />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}

export default ChartsSection
